using BepInEx;
using HarmonyLib;

namespace MonsterTrainInvulnerableMod
{
    [BepInPlugin(GUID, NAME, VERSION)]
    [BepInProcess("MonsterTrain.exe")]
    [BepInProcess("MtLinkHandler.exe")]
    public class Invulnerability : BaseUnityPlugin
    {
        public const string GUID = "com.github.cdietschrun.MonsterTrainInvulnerableMod";
        public const string NAME = "Invulnerable Pyre Mod";
        public const string VERSION = "1.0.0";

        private void Awake()
        {
            var harmony = new Harmony(GUID);
            harmony.PatchAll();
        }
    }

    [HarmonyPatch(typeof(CombatManager), "HandleTowerHPChanged")]
    public static class CombatManagerHandleTowerHPChangedOverride
    {
        static bool Prefix(ref SaveManager.PyreHPChangedSignalData data, ref SaveManager ___saveManager)
        {
            data.newHP = ___saveManager.GetTowerHP();
            data.prevHP = ___saveManager.GetTowerHP();
            return false;
        }
    }

    [HarmonyPatch(typeof(PyreRoomState), "SynchronizeHP")]
    public static class PyreRoomStateSynchronizeHPOverride
    {
        static bool Prefix(ref SaveManager.PyreHPChangedSignalData data, ref SaveManager ___saveManager)
        {
            data.newHP = ___saveManager.GetTowerHP();
            data.prevHP = ___saveManager.GetTowerHP();
            return false;
        }
    }

    [HarmonyPatch(typeof(CharacterState), "ApplyDamage")]
    public static class CharacterStateApplyDamagerOverride
    {
        static void Prefix(ref CharacterState __instance, ref int damage)
        {
            if (__instance.IsPyreHeart())
            {
                damage = 0;
            }
        }
    }

    [HarmonyPatch(typeof(PlayerManager), "AdjustTowerHP")]
    public static class PlayerManagerAdjustTowerHPOverride
    {
        static void Prefix(ref int addHP)
        {
            addHP = 0;
        }
    }
}
