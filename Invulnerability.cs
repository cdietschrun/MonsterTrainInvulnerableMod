using BepInEx;
using HarmonyLib;
using System;

namespace MonsterTrainInvulnerableMod
{

    [BepInPlugin(GUID, NAME, VERSION)]
    [BepInProcess("MonsterTrain.exe")]
    [BepInProcess("MtLinkHandler.exe")]
    public class Invulnerability : BaseUnityPlugin
    {
        public const string GUID = "com.github.cdietschrun.MonsterTrainInvulnerableMod";
        public const string NAME = "Invulnerable Pyre Mod";
        public const string VERSION = "0.1.0";

        private void Awake()
        {
            var harmony = new Harmony(GUID);
            harmony.PatchAll();
        }
    }

    [HarmonyPatch(typeof(CombatManager), "AttackTower")]
    public static class AttackTowerOverride
    {
        static bool Prefix(ref int newHP, ref SaveManager ___saveManager)
        {
            //newHP = ___saveManager.GetTowerHP();
            newHP = 1;
            return false;
        }
    }

    [HarmonyPatch(typeof(CombatManager), "HandleTowerHPChanged")]
    public static class AttackTowerOverride2
    {
        static bool Prefix(ref SaveManager.PyreHPChangedSignalData data, ref SaveManager ___saveManager)
        {
            //newHP = ___saveManager.GetTowerHP();
            data.newHP = ___saveManager.GetTowerHP();
            data.prevHP = ___saveManager.GetTowerHP();
            return false;
        }
    }

    [HarmonyPatch(typeof(PyreRoomState), "SynchronizeHP")]
    public static class PyreRoomStateSynchronizeHPOverride
    {
        static bool Prefix(ref SaveManager.PyreHPChangedSignalData data, ref SaveManager ___saveManager)
        {
            data.newHP = ___saveManager.GetTowerHP();
            data.prevHP = ___saveManager.GetTowerHP();
            return false;
        }
    }

    [HarmonyPatch(typeof(CharacterState), "AddHpChangedListener")]
    public static class PyreRoomStateSynchronizeHPOverride4
    {
        static bool Prefix(ref CharacterState __instance)
        {
            if (__instance.IsPyreHeart())
            {
                return false;
            }

            return true;
        }
    }

    [HarmonyPatch(typeof(CharacterState), "ApplyDamage")]
    public static class PyreRoomStateSynchronizeHPOverride8
    {
        static void Prefix(ref CharacterState __instance, ref int damage)
        {
            if (__instance.IsPyreHeart())
            {
                damage = 0;
            }
        }
    }

    [HarmonyPatch(typeof(CharacterState), "IsImmune")]
    public static class PyreRoomStateSynchronizeHPOverride5
    {
        static void Postfix(ref CharacterState __instance, ref bool __result)
        {
            if (__instance.IsPyreHeart())
            {
                __result = true;
            }
        }
    }

    [HarmonyPatch(typeof(CharacterState), "SetDestroyedState")]
    public static class PyreRoomStateSynchronizeHPOverride7
    {
        static bool Prefix(ref CharacterState __instance)
        {
            if (__instance.IsPyreHeart())
            {
                return false;
            }

            return true;
        }
    }

    [HarmonyPatch(typeof(PlayerManager), "AdjustTowerHP")]
    public static class PlayerManagerAdjustTowerHPOverride
    {
        static void Prefix(ref int addHP)
        {
            addHP = 0;
        }
    }

    [HarmonyPatch(typeof(PyreRoomState), "Setup")]
    public static class Mod_BalanceData_GetUpgradeSlots3
    {
        static void Prefix(ref int __cachedPyreHP, ref int __cachedPyreMaxHP)
        {
            __cachedPyreHP = 1;
            __cachedPyreMaxHP = 1;
        }
    }

    [HarmonyPatch(typeof(SaveManager), "GetTowerHP")]
    public static class Mod_BalanceData_GetUpgradeSlots
    {
        private static void Postfix(ref int __result)
        {
            //___unitUpgradeSlots = SixCardUpgrades.NumCardUpgrades;
            //___spellUpgradeSlots = SixCardUpgrades.NumCardUpgrades;
            __result = 1;
            //this.pyreHeart.SetAttackDamage(90);
        }
    }
}
